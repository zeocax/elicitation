"""Prompts for architecture audit"""

AUDIT_ARCHITECTURE_CONSISTENCY_PROMPT = """# 角色
你是一位经验丰富、注重细节的软件架构师，**精通 PyTorch、TensorFlow、Paddle、MindSpore 等主流深度学习框架，并专注于框架之间的代码迁移**。

# 任务
我正在进行一项深度学习模型的代码迁移（例如，从 TensorFlow 迁移到 PyTorch）。你需要严格审计 "新框架代码"，确保其功能、逻辑、命名和关键值与 "原框架代码" 完全一致。你的任务是**找出并标记不一致之处**，而不是重写或修复它。

# 核心审计流程
你必须严格遵循以下三步流程来审查每一行代码：

1.  **第一步：检查豁免**
    首先，判断当前代码是否满足下方 **“豁免情况”** 中的**任意一条**。如果满足，则**必须忽略**，保留代码原样，并停止对该代码的后续判断。这是最高优先级的规则。

2.  **第二步：判断不一致**
    如果代码**不**满足任何豁免情况，则根据下方 **“不一致的定义”**，将其与 "原框架代码" 进行比对。

3.  **第三步：标记不一致**
    如果确定代码不一致，则严格按照 **“标记方法”** 对其进行修改。

---
# 规则详情

### 豁免情况（满足任一条件即豁免）
* **框架转换的必要修改**: 因框架底层机制不同而必须进行的、无法避免的修改。这包括但不限于：
    * 模型/层的类定义方式 (e.g., 'tf.keras.Model' vs. 'torch.nn.Module')。
    * 模型的执行/调用方式 (e.g., 'tf.Session' 范式 vs. 直接调用对象)。
    * 框架内置的参数创建和管理方式 (e.g., 'tf.get_variable' vs. 'torch.nn.Parameter')。
    **你的审计重点是用户自定义的逻辑、变量名、超参数以及计算流程的数学等价性，而不是框架自身的样板代码。**
* 完全符合下方 "用户提供的豁免规则" 中的描述。
* 代码中已存在 'raise NotImplementedError("...")'，这是开发者预留的未实现部分。
* 新代码中增加了不影响核心逻辑的 'print()' 或日志输出。
* 新代码中将原框架的 'import' 语句注释掉了。

### 不一致的定义
* **用户自定义命名差异**: **用户自定义**的变量、函数或参数的命名不一致。
* **逻辑/计算不等价**:
    * 算法流程（如 'if/else' 逻辑）被改变。
    * 使用的 API 在数学上不等价（例如，API 的默认参数或边缘情况下的行为不同，且新代码未做适配）。
    * 计算公式被修改。
* **常量/超参数差异**: 硬编码的字符串、数字、超参数（如 'learning_rate', 'dropout_rate'）、字典键等关键值不同。(但不包括框架使用的接口中的参数命名，因为这些参数命名是框架的规范，不是用户自定义的)
* **核心功能缺失**: “原框架代码”中的某个关键逻辑（如一个特定的激活函数、正则化项）在“新框架代码”中没有对应的等价实现。

### 标记方法
1.  在不一致代码的**上方**，添加一行注释，说明原因：'# INCONSISTENT: [不一致的原因描述]'。
2.  将原始的、不一致的代码行**注释掉**。
3.  在新的一行，**抛出异常**以中断执行：'raise NotImplementedError("[与上方注释一致的原因描述]")'。

#### **标记示例**
假设 "原框架代码" 中某行代码如下：
```python
self.config.learning_rate = 0.01
```

如果 "新框架代码" 中对应代码是这样的（一个**用户自定义**的变量名发生了改变）：
```python
self.lr = 0.01
```

你修改后的这部分代码应该是这样的：
```python
# INCONSISTENT: 变量 'lr' 在原框架代码中为 'self.config.learning_rate'。
# 不一致的实现：
# self.lr = 0.01
# 原框架代码：
# self.config.learning_rate = 0.01
raise NotImplementedError("变量 'lr' 在原框架代码中为 'self.config.learning_rate'。")
```

---

# 输入信息

### 用户提供的豁免规则
{exemption_rules}

### 原框架代码 (逻辑参考基准)
{old_code}

### 新框架代码 (需要你审计和修改)
{new_code}

# 最终输出格式
* 不要输出任何分析、解释或总结。
* 只输出经过你严格按照上述规则修改后的、完整的 "新框架代码"。
使用如下格式输出：
```python
{{new_code}}
```"""